一、贪婪算法
        1、贪婪算法很简单：每步都采取最优的做法。
        2、贪婪算法的用途：有时候，你只需找到一个能够大致解决问题的算法，此时贪婪算法正好可派上用场，因为它们实现起来很容易，得到的结果又与正确结果相当接近。
        3、判断近似算法优劣的标准如下：
            a)速度有多快.
            b)得到的近似解与最优解的接近程度.
        4、求并集：covered = states_needed & states_for_station
            a)并集意味着将集合合并。
            b)交集意味着找出两个集合中都有的元素。
            c)差集意味着将从一个集合中剔除出现在另一个集合中的元素。
二、NP完全问题
        1、NP完全问题的简单定义是，以难解著称的问题，如旅行商问题和集合覆盖问题。
        2、如何区别np完全问题：
        a)元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。
        b)涉及“所有组合”的问题通常是NP完全问题。
        c)不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。
        d)如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题。
        e)如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。
        f)如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。
三、小结
        a)贪婪算法寻找局部最优解，企图以这种方式获得全局最优解。
        b)对于NP完全问题，还没有找到快速解决方案。
        c)面临NP完全问题时，最佳的做法是使用近似算法。
        d)贪婪算法易于实现、运行速度快，是不错的近似算法。
