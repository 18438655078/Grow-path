二、1、数组：意味着所有待办事项在内存中都是相连的（紧靠在一起的）。
          优点：1、要随机地读取元素时，数组的效率很高，因为可迅速找到数组的任何元素。
                2、读取速度快。
                3、支持随机访问。
                4、数组擅长随机访问。
          缺点：1、如果数组满额，若要继续添加事件需要重新申请一块内存并转移，很麻烦。
                2、如果数组不满，申请的额外内存就会浪费，自己不用他人也无法使用。
                3、占用空间大。
                解决方法：使用链表。              
    2、链表：链表的每个元素都存储了下一个元素的地址，从而使一系列随机的内存地址串在一起。
          优点：1、插入元素方便。
                2、需要同时读取所有元素时，链表的效率很高。
                3、占用空间小，"见缝插针"。
                4、链表擅长插入和删除
          缺点：1、在需要读取链表的最后一个元素时，你不能直接读取，因为你不知道它所处的地址，
                   必须先访问元素#1，从中获取元素#2的地址，再访问元素#2并从中获取元素#3的地址，
                   以此类推，直到访问最后一个元素。
                2、进行跳跃查找效率低。因为要获知#3元素的地址需要先访问#2才可以获知#3的地址对其进行访问。
                3、读取速度慢。
                4、不支持随机访问。
    3、大O运行时间比较：        数组     链表
                      读取     O(1)     O(n)
                      插入     O(n)     O(1)
                      删除     O(n)     O(1)
    4、选择排序：选择排序是一种灵巧的算法，但其速度不是很快。O(n*n)
       示例代码：功能同list.sort()
              def find(arr):
                  mini = arr[0]
                  mini_index = 0
                  for i in range(1, len(arr)):
                      if arr[i] < mini:
                          mini = arr[i]
                          mini_index = i
                  return mini_index


              def select(arr):
                  newArr = []
                  for i in range(len(arr)):
                      mini = find(arr)
                      newArr.append(arr.pop(mini))
                  return newArr


              print(select([5, 2, 10, 6, 8, 9]))
    5、小结
          a)计算机内存犹如一大堆抽屉。
          b)需要存储多个元素时，可使用数组或链表。
          c)数组的元素都在一起。
          d)链表的元素是分开的，其中每个元素都存储了下一个元素的地址。
          e)数组的读取速度很快。
          f)链表的插入和删除速度很快。
          g)在同一个数组中，所有元素的类型都必须相同（都为int、double等）。
