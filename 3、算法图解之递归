一、1、递归：函数自己调用自己达到循环的操作。由于递归函数调用自己，因此编写这样的函数时很容易出错，进而导致无限循环。
    2、每个递归函数都有两部分：基线条件（base case）和递归条件（recursive case）。
                              递归条件指的是函数调用自己。
                              基线条件则指的是函数不再调用自己，从而避免形成无限循环。
    3、栈：栈是一种简单的数据结构，先进后出，压入和弹出两种操作。
          a)对与栈的伪函数解析：
               def greet(name):
                   print "hello, " + name + "!"
                   greet2(name)
                   print "getting ready to say bye..."
                   bye()
               def greet2(name):
                   print "how are you, " + name + "?"
                   def bye():
                   print "ok bye!" 
                name = "maggie"
                greet(name)
           当计算机开始执行代码时，从上往下执行，变量name申请了内存栈放在最底部；
           然后调用greet方法，greet方法会先加入到内存栈中，盖在name上，然后执行完毕之后调用返回就被弹出内存；
           依次类推往下执行。
           b)使用栈很方便，它会自动帮你追踪下一个。
           c)使用栈虽然很方便，但是也要付出代价：存储详尽的信息可能占用大量的内存。
             每个函数调用都要占用一定的内存，如果栈很高，就意味着计算机存储了大量函数调用的信息。
              两种解决办法：i.重新编写代码，使用循环。
                           ii.使用尾递归。
           d)问题：假设你编写了一个递归函数，但不小心导致它没完没了地运行。
                   正如你看到的，对于每次函数调用，计算机都将为其在栈中分配内存。
                   递归函数没完没了地运行时，将给栈带来什么影响？
                   答：栈将不断地扩大。因为每个程序可使用的调用栈空间有限，程序用完这些空间后，将因栈的溢出而终止。
     4、小结：
        a)递归指的是调用自己的函数。
        b)每个递归函数都有两个条件：基线条件和递归条件。
        c)栈有两种操作：压入和弹出。
        d)所有函数调用都进入调用栈。
        e)调用栈可能很长，这将占用大量的内存。
